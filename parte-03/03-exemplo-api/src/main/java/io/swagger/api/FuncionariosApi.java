/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Funcionario;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-02T12:20:48.886Z[GMT]")
@Validated
public interface FuncionariosApi {

    @Operation(summary = "Create a Funcionario", description = "Creates a new instance of a `Funcionario`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Successful response.") })
    @RequestMapping(value = "/funcionarios",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createFuncionario(@Parameter(in = ParameterIn.DEFAULT, description = "A new `Funcionario` to be created.", required=true, schema=@Schema()) @Valid @RequestBody Funcionario body);


    @Operation(summary = "Delete a Funcionario", description = "Deletes an existing `Funcionario`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successful response.") })
    @RequestMapping(value = "/funcionarios/{funcionarioId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFuncionario(@Parameter(in = ParameterIn.PATH, description = "A unique identifier for a `Funcionario`.", required=true, schema=@Schema()) @PathVariable("funcionarioId") String funcionarioId);


    @Operation(summary = "Get a Funcionario", description = "Gets the details of a single instance of a `Funcionario`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response - returns a single `Funcionario`.", content = @Content(schema = @Schema(implementation = Funcionario.class))) })
    @RequestMapping(value = "/funcionarios/{funcionarioId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Funcionario> getFuncionario(@Parameter(in = ParameterIn.PATH, description = "A unique identifier for a `Funcionario`.", required=true, schema=@Schema()) @PathVariable("funcionarioId") String funcionarioId);


    @Operation(summary = "List All Funcionarios", description = "Gets a list of all `Funcionario` entities.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response - returns an array of `Funcionario` entities.", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Funcionario.class)))) })
    @RequestMapping(value = "/funcionarios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Funcionario>> getFuncionarios();


    @Operation(summary = "Update a Funcionario", description = "Updates an existing `Funcionario`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "202", description = "Successful response.") })
    @RequestMapping(value = "/funcionarios/{funcionarioId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateFuncionario(@Parameter(in = ParameterIn.PATH, description = "A unique identifier for a `Funcionario`.", required=true, schema=@Schema()) @PathVariable("funcionarioId") String funcionarioId, @Parameter(in = ParameterIn.DEFAULT, description = "Updated `Funcionario` information.", required=true, schema=@Schema()) @Valid @RequestBody Funcionario body);

}

